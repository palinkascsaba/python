s = 'CATTAAGAAGCAAGTAAATCAATTCGTACACGCATCACACATACCTCGCAGAGGATGTGTTTTGCGTCTCTTTGTACAAACGCGCTTGTTTGCATTCATTTGCGTAGGAACCATGCGCTACAAAAATCGAATGAGTGGGCGTCGAGAGCCAGATTGCGAATCGCCCGAGTCACTACCGGACTACACTATTTTTAGTTGTCAACAGACGTAACCCAAGATCAGCATCTGCGGATCTTAACTATCAAGACTCGCCAAGCTGAGCACTTTTCTGCACCCATTTAATACCTCCAGAATATTTTGTACCCGGGGCATTCTCTCTGCGCGTTTTGTTGGCTATACCGCTTGTAATGCTCTGTCATATGTTCGACTCCTAGCTGACTGTAGTCGGGTACGCGCATCACAGTAAGCTCCGGATAGTCAAAGTACTCGTCGTTATCTATTCCTTTACACGGTCTGTCCAGGACGAATCGAGCCTACCCGATCATCCACCGCGTGTTCTTCTATGGTTCTTCGGCATGACCTATCTATCTGCTCAACGTGCGACCTTCTTTGGACGTTGCCGGTGAACTGGCTTACTCTAGGCCACCTACACACATATACGTGGATATAAGGGTAACAATTTTAAGGCGAACCGATTCCAAGTGACACCGAGACCCTCTGTCAACGGAAACTACGCTCAGTGCATTACTTAATCTGCAGCAAACCGGGAGTGACTTAAAACCAACGACAAAACAGGATTATTAGACAGTTTACGATCCTTATTATATCGTCTCCTAATCTTTGAGATAATAAAATTACGTATGCATGTAACGTAGACAGACGGCAGCATGGGCGTTTATACAAGTGTACTTCTCATAGGGAGAGTAGGTTATAGGATCGATGAAGGTTATTTGCCCGGAGGAGACGCAGAATAGGACCGAGAATACATTGGCGACAGCGTTGTAACATTTATATAAG'
t = 'CTTTCAGAAGCGCGTCTACAAATTTAGTCACGCCTTACCAATCCCGGGTAGAGTTTTTGTTATCTGTCTCGTGACTTGCGATCGCTAGAGCATCTTCCTACGCGTAGTTACGATACCGTAGTGTAATCCATTGGTTGGCGACAGCGAAAAATATTGGGAATTACCAGGCCCTATAACCGGGTGACCCACGGACATTTGTAACCAGATGACGAGCCATCCCAGCATTGTCAGCTGACCGCAATCGAGCGTCGCCTGCCTGTCCACTTTCTAAAGCCGTCGGAAGACCGCCAGCTTGTTGGTCATCGGGCGCTAACCATCACCAGCTATCGATCCGTTAACCGCCTTTTACGCACTCTGATATGTGACATACCATGCCGACTGAAACCTTTTTAGAGGGTCATAGACAGCTATGCAGTTTCAAGGTATAAGCGGTAGCGTATTGCTATGCTGGGCCTTACAGATTCAGTTGCGGGTTAATAACTTCTCCGTGGCAAGTCGTGGCATGCAACCTCGGGATGACCTACGTTGCTTCTCAACCCGCCGCACCCTTCGTTAGTTTCCAACGCACTCGTGTGCTGACTGTCTCCGAGAAACATCTTCGTTGAGCTATGTGTGTCGCGTTTGAGCGAGTCGGATTCCCGCTGACCCTTTGCCCTGATCCCCCTAGTTAAGACGGTCAGTGAAAAATTACACCATAAGCAAATCGCGATTTTACTGGAACCGCTACCAAGGCGAGTTTATTGACCCCTGCGTAGATAACATGATATAGCCTATCTATCCAAGACACCACACGGTTACCGGTGCATTCAACGTAAGTCGTGCATAGCAAGCTCCATTAGACAATTTGACGCTTCCGACCGTGCCTTGGCAAGCAGCCCGGGTCCGTGCTCTGTTGCGTGATTGAACTAACTCAGAATTGAGTATACTTGCCGGCTCGCGTGCGATCAGTTTTATGAA'
#loop
def hamming_distance(s,t):
    if len(s) != len(t):
        raise ValueError("Strings are not the same length")
    hammingdistance = 0
    for nuc_pos in range(len(s)):
        if s[nuc_pos] != t[nuc_pos]:
            hammingdistance += 1
    return hammingdistance
print (hamming_distance(s,t))

#set
def set_hamming_distance(s,t):
    if len(s) != len(t):
        raise ValueError("Strings are not the same length")
    set_s = set([(i, char) for i, char in enumerate(s)])
    set_t = set([(i, char) for i, char in enumerate(t)])
    return len(set_s.difference(set_t))
print (set_hamming_distance(s,t))

#zip
def zip_hamming_distance(s,t):
    if len(s) != len(t):
        raise ValueError("Strings are not the same length")
    zipped_dna = zip(s,t)
    hammingdistance = [(nuc1,nuc2) for nuc1, nuc2 in zipped_dna if nuc1 != nuc2]
    return len(hammingdistance)
print(zip_hamming_distance(s,t))